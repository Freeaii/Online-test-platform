<template>
  <div class="login_container" data-title="在线考试系统-登录">
    <h1 id="LoginTitle">在线考试系统</h1>
    <div class="login_box">
      <h1 id="LoginBoxTitle">登&nbsp;录</h1>
      <!--      登录表单，rules校验规则-->
      <el-form ref="loginFormRef" label-width="70px" :rules="loginFormRules"
        :model="loginForm" class="login_form">
        <!--        用户名-->
        <el-form-item class="selectRole" label="用户名" prop="uid">
          <el-input ref="uid" v-model="loginForm.uid" prefix-icon="el-icon-user"
            placeholder="请输入用户名"></el-input>
        </el-form-item>
        <!--        密码-->
        <el-form-item class="selectRole" label="密码" prop="password">
          <el-input ref="password" type="password" v-model="loginForm.password"
            placeholder="请输入密码" prefix-icon="el-icon-lock"></el-input>
        </el-form-item>
        <p style="font-size: 10px;margin-left: 70px"><input type="checkbox"
            v-model="loginForm.isRemembered" value="记住密码" />记住密码</p>
        <!--        <el-checkbox id="checkRemember" :checked="loginForm.isRemembered?true:false" :label="loginForm.isRemembered" v-model="loginForm.isRemembered">记住账号</el-checkbox>-->
        <!--      登录重置-->
        <el-form-item class="buttons">
          <el-button type="primary" size="mini" @click="submitForm">登录
          </el-button>
          <el-button type="info" size="mini" @click="resetLoginForm">重置
          </el-button>
          <div id="registerButton">
            <el-button type="text" @click="toRegister">注册</el-button>
          </div>
        </el-form-item>
      </el-form>
    </div>
  </div>
</template>

<script lang="ts" setup>

export default {
  name: "Login",

  data () {
    return {
      // 登录表单的数据绑定对象
      loginForm: {
        uid: '',
        password: '',
        role: '',
        //是否保留账号
        isRemembered: false,
      },
      //加载
      loading: false,

      // 表单验证规则
      loginFormRules: {
        //验证用户名是否合法
        uid: [{ required: true, message: '请输入登录用户', trigger: 'blur' },
        { min: 3, max: 10, message: '长度在 3 到 10 个字符', trigger: 'blur' }],
        //验证密码是否合法
        password: [{ required: true, message: '请输入密码', trigger: 'blur' },
        { min: 3, max: 15, message: '长度在 3 到 15 个字符', trigger: 'blur' }],
      }
    }
  },


  mounted () {
    if (localStorage.isRemembered) {
      this.$axios.get('http://127.0.0.1:5000/auth/verify').then(res => {
        if (res.data.data === null)
          return res
        this.getLogin(res.data.data)
      })
    }
    if (this.loginForm.uid === '') {
      this.$refs.uid.focus()
    } else if (this.loginForm.password === '') {
      this.$refs.password.focus()
    }
  },
  methods: {
    // 重置登录表单
    resetLoginForm () {
      this.$refs.loginFormRef.resetFields();
    },
    submitForm () {
      this.$refs.loginFormRef.validate(async valid => {
        debugger
        console.log(this.loginForm.password);
        if (valid) {
          this.$axios.post('http://127.0.0.1:5000/auth/login', JSON.stringify(this.loginForm), { emulateJSON: true }).then(res => {
            let role = 'student'
            // this.$store.user = {
            //   id: 3,
            //   name: 'student1',
            //   role: 'student',
            // }
            this.$router.push('/home')
            if (res.data.code === 200) {
              let uid = res.data.token.uid
              let role = res.data.token.role
              let name = res.data.token.username
              if (this.loginForm.isRemembered) {
                localStorage.setItem('isRemembered', this.loginForm.isRemembered)
                localStorage.setItem('password', encrypt(this.loginForm.password))
                localStorage.setItem('elementToken', uid)
              }
              else {
                localStorage.clear()
              }
              sessionStorage.setItem('role', this.loginForm.role)
              window.sessionStorage.setItem("token", uid)
              window.sessionStorage.setItem("role", role)
              window.sessionStorage.setItem("name", name)
              if (role === '学生') {
                let Class = res.data.token.Class
                window.sessionStorage.setItem("class", Class)
              }
              this.$router.push('/home')
              this.$message.success("登录成功")
            }
            else {
              let msg = res.data.msg
              this.$message.error(msg)
            }
          })
        }
        else
          return false

      });
    },
    getLogin (data) {
      const uid = data['uid'] === null ? null : data['uid']
      const password = data['password']
      const role = data['role']
      this.loginForm = {
        uid: uid === null ? this.loginForm.uid : uid,
        password: password === null ? this.loginForm.password : decrypt(localStorage.password),
        role: role === null ? this.loginForm.role : role,
        isRemembered: localStorage.isRemembered
      }
    },
    toRegister: function () {
      this.$router.push("/register");
    }
  }
}
</script>

<style>
//整个网页
.login_container {
  background-color: #2b4b6b;
  height: 100%;
  background-image: url("/src/assets/loginbg.png");
}
//网站大标题
#LoginTitle {
  font-family: 楷体, sans-serif;
  font-size: 50px;
  text-align: center;
  padding-top: 5%;
}
//登录框
.login_box {
  width: 450px;
  height: 300px;
  background-color: white;
  border-radius: 3px;
  position: absolute;
  left: 50%;
  top: 50%;
  transform: translate(-50%, -50%);
}
//登录框标题
#LoginBoxTitle {
  text-align: center;
  font-size: 30px;
  line-height: 52px;
  font-weight: bolder;
  height: 52px;
  font-family: "阿里巴巴普惠体 B", Arial, sans-serif;
}
//登录表单
.login_form {
  position: absolute;
  bottom: 0;
  width: 100%;
  padding: 0 20px;
  box-sizing: border-box;
  .selectRole {
    margin-bottom: 16px;
  }
  #checkRemember {
    margin-left: 70px;
  }
}
//按钮
.buttons {
  text-align: center;
  .el-form-item__content {
    margin-left: 0;
  }
}
//注册按钮
#registerButton {
  height: 5px;
  font-size: 5px;
  float: right;
}
</style>